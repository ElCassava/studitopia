-- Additional tables needed for comprehensive quiz tracking and analytics

-- Quiz Questions Table (similar to test_questions)
CREATE TABLE public.quiz_questions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quiz_section_id uuid,
  question_text text NOT NULL,
  image_url text,
  correct_answer text NOT NULL,
  explanation text,
  question_order integer DEFAULT 1,
  CONSTRAINT quiz_questions_pkey PRIMARY KEY (id),
  CONSTRAINT quiz_questions_quiz_section_id_fkey FOREIGN KEY (quiz_section_id) REFERENCES public.quiz_sections(id)
);

-- Quiz Choices Table (similar to test_choices)
CREATE TABLE public.quiz_choices (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id uuid,
  choice_text text NOT NULL,
  choice_order integer DEFAULT 1,
  CONSTRAINT quiz_choices_pkey PRIMARY KEY (id),
  CONSTRAINT quiz_choices_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.quiz_questions(id)
);

-- Quiz Attempt Details Table (similar to test_attempt_details)
CREATE TABLE public.quiz_attempt_details (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quiz_attempt_id uuid,
  question_id uuid,
  selected_answer text,
  is_correct boolean,
  time_taken integer CHECK (time_taken >= 0),
  answered_at timestamp with time zone DEFAULT now(),
  CONSTRAINT quiz_attempt_details_pkey PRIMARY KEY (id),
  CONSTRAINT quiz_attempt_details_quiz_attempt_id_fkey FOREIGN KEY (quiz_attempt_id) REFERENCES public.quiz_attempts(id),
  CONSTRAINT quiz_attempt_details_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.quiz_questions(id)
);

-- Update quiz_attempts table to include score and completion times
ALTER TABLE public.quiz_attempts 
ADD COLUMN start_time timestamp with time zone DEFAULT now(),
ADD COLUMN end_time timestamp with time zone,
ADD COLUMN score integer CHECK (score >= 0 AND score <= 100);

-- Create indexes for better performance on analytics queries
CREATE INDEX idx_test_attempts_user_course ON public.test_attempts(user_id, test_section_id);
CREATE INDEX idx_test_attempts_start_time ON public.test_attempts(start_time);
CREATE INDEX idx_test_attempt_details_correct ON public.test_attempt_details(is_correct);

CREATE INDEX idx_quiz_attempts_user_course ON public.quiz_attempts(user_id, quiz_section_id);
CREATE INDEX idx_quiz_attempts_start_time ON public.quiz_attempts(start_time);
CREATE INDEX idx_quiz_attempt_details_correct ON public.quiz_attempt_details(is_correct);

-- Add some useful analytics views
CREATE VIEW student_test_analytics AS
SELECT 
  u.id as user_id,
  u.username,
  u.learning_style_id,
  ls.name as learning_style,
  cs.course_id,
  c.course_name,
  ta.test_section_id,
  ta.start_time,
  ta.end_time,
  ta.score,
  EXTRACT(EPOCH FROM (ta.end_time - ta.start_time))/60 as duration_minutes,
  COUNT(tad.id) as total_questions,
  SUM(CASE WHEN tad.is_correct THEN 1 ELSE 0 END) as correct_answers,
  ROUND(AVG(tad.time_taken)) as avg_time_per_question
FROM users u
JOIN test_attempts ta ON u.id = ta.user_id
LEFT JOIN test_attempt_details tad ON ta.id = tad.test_attempt_id
LEFT JOIN test_sections ts ON ta.test_section_id = ts.id
LEFT JOIN course_sections cs ON ts.course_section_id = cs.id
LEFT JOIN courses c ON cs.course_id = c.id
LEFT JOIN learning_styles ls ON u.learning_style_id = ls.id
WHERE ta.end_time IS NOT NULL
GROUP BY u.id, u.username, u.learning_style_id, ls.name, cs.course_id, c.course_name, ta.test_section_id, ta.start_time, ta.end_time, ta.score;

CREATE VIEW student_quiz_analytics AS
SELECT 
  u.id as user_id,
  u.username,
  u.learning_style_id,
  ls.name as learning_style,
  cs.course_id,
  c.course_name,
  qa.quiz_section_id,
  qa.start_time,
  qa.end_time,
  qa.score,
  EXTRACT(EPOCH FROM (qa.end_time - qa.start_time))/60 as duration_minutes,
  COUNT(qad.id) as total_questions,
  SUM(CASE WHEN qad.is_correct THEN 1 ELSE 0 END) as correct_answers,
  ROUND(AVG(qad.time_taken)) as avg_time_per_question
FROM users u
JOIN quiz_attempts qa ON u.id = qa.user_id
LEFT JOIN quiz_attempt_details qad ON qa.id = qad.quiz_attempt_id
LEFT JOIN quiz_sections qs ON qa.quiz_section_id = qs.id
LEFT JOIN course_sections cs ON qs.course_section_id = cs.id
LEFT JOIN courses c ON cs.course_id = c.id
LEFT JOIN learning_styles ls ON u.learning_style_id = ls.id
WHERE qa.end_time IS NOT NULL
GROUP BY u.id, u.username, u.learning_style_id, ls.name, cs.course_id, c.course_name, qa.quiz_section_id, qa.start_time, qa.end_time, qa.score;
